{"version":3,"sources":["features/math/visualization/Visualization.tsx","features/login/LoginPrompt.tsx","app/hooks.ts","features/login/loginAPI.ts","features/login/loginSlice.ts","features/login/Login.tsx","features/math/visualization/helpers/draw.ts","features/math/algorithms.ts","features/math/mathAPI.ts","features/math/mathSlice.ts","features/math/visualization/simulation/index.ts","features/math/visualization/simulation/gravity.ts","features/math/Math.tsx","features/math/Statement.tsx","features/math/Search.tsx","features/math/InfoContainer.tsx","features/math/visualization/helpers/transform.ts","features/math/visualization/VisualizationContainer.tsx","components/About.tsx","components/Layout.tsx","App.tsx","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["old","LoginPrompt","onLogin","props","useState","promptOpen","setPromptOpen","localStorage","getItem","idp","setIdp","isOpen","onRequestClose","contentLabel","overlayClassName","base","afterOpen","beforeClose","className","closeTimeoutMS","onClick","onSubmit","e","preventDefault","setItem","id","type","value","onChange","newValue","currentTarget","placeholder","useAppDispatch","useDispatch","useAppSelector","useSelector","init","a","handleIncomingRedirect","url","window","location","href","restorePreviousSession","sessionInfo","login","oidcIssuer","solidLogin","redirectUrl","clientName","alert","removeItem","logout","solidLogout","initialState","webId","isLoggedIn","status","createAsyncThunk","api","response","loginSlice","createSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","selectSession","selectLoginStatus","Login","dispatch","info","commonProps","disabled","drawText","context","text","options","x","y","font","textBaseline","textAlign","Object","assign","fillText","drawCircle","radius","beginPath","arc","Math","PI","fill","drawLine","start","end","moveTo","lineTo","stroke","Visualization","graph","grid","onTransform","onHover","onSelectNode","canvasEl","useRef","width","height","setVisualizationSize","useEffect","current","getContext","offset","save","translate","clearRect","strokeStyle","min1","max1","min0","max0","getLineWidth","i","highlight","distance","origin","lineWidth","drawGrid","links","forEach","link","s","source","t","target","v","numeric","sub","size","sqrt","div","add","mul","r","color","node","label","accented","nodes","filter","style","focused","focused2","rest","fillStyle","drawGraph","restore","updateCanvasSize","elementRef","clientHeight","clientWidth","getElementSize","addEventListener","removeEventListener","select","call","drag","clickDistance","on","dx","dy","zoom","scaleExtent","transform","k","dot","inv","withCanvasPosition","func","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","handleClick","ref","onMouseMove","onMouseOut","Infinity","classnames","prune","input","graphlib","Graph","values","setNode","uri","dependencies","dependency","setEdge","output","fromEntries","entries","map","alg","isAcyclic","Error","edges","edge","removeEdge","dijkstra","w","pruneCore","fetchGraph","getSolidDataset","fetch","dataset","things","getThingAll","thing","asUrl","getTerm","rdf","description","rdfs","push","en","dependents","examples","created","updated","proofs","getTermAll","findMathDocumentsOfPerson","me","getThing","publicTypeIndex","solid","index","mathDocuments","forClass","includes","instance","flat","addDocuments","documents","addGraph","mathSlice","entities","byId","allIds","document","ui","highlighted","selected","search","query","setSearch","dependent","actions","selectGraph","createSelector","math","enrichedNodes","enrichedNode","selectPrunedGraph","selectSearch","selectHighlighted","selectSelected","selectSelectedNodeDependencies","selectSearchResults","length","toLowerCase","sort","b","slice","selectSelectedNode","Simulation","runs","simulation","forceSimulation","alphaDecay","force","forceLink","strength","alpha","d","vy","optimumDifference","_","forceGravity","forceManyBody","distanceMax","forceX","forceY","forceCollide","forceCenter","stop","onTick","restart","update","thisNodeDict","updatedNodes","random","selectNode","find","Styler","styled","children","remarkPlugins","remarkMath","rehypePlugins","rehypeKatex","NodeList","title","onMouseEnter","onMouseLeave","Statement","Search","ICOutside","ICInside","InfoContainer","matrix","vector","raw","transpose","nodeRadius","count","basicGrid","VisualizationContainer","prunedGraph","highlightedNode","selectedNode","selectedNodeDependencies","layout","setLayout","setMatrix","lastUpdate","Date","now","reduce","keys","withNode","position","handleHover","handleSelect","transformedLayout","selectedDependencies","transformedNodesDict","sourceUri","targetUri","transformLayout","transformGrid","prevMatrix","Link","Footer","footer","About","PositionedLogin","PositionedAbout","FullSizeVisualization","Layout","App","initLogin","store","configureStore","reducer","loginReducer","mathReducer","watchLogin","watch","getState","subscribe","watchDocuments","newDocs","oldDocs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appElement","querySelector","Modal","setAppElement","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.648cd505.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport { drawGrid, drawGraph } from './helpers/draw'\nimport classnames from 'classnames'\nimport { drag } from 'd3-drag'\nimport { zoom } from 'd3-zoom'\nimport { select } from 'd3-selection'\nimport numeric from 'numeric'\nimport { VisualizationGraph, Vector, Grid, Matrix } from './types'\n\ntype Props = Partial<React.CanvasHTMLAttributes<HTMLCanvasElement>> & {\n  graph: VisualizationGraph\n  grid: Grid\n  onTransform: (matrix: Matrix) => void\n  onHover: (position: Vector) => void\n  onSelectNode: (position: Vector) => void\n}\n\nlet old: Matrix\n\nconst Visualization: React.FC<Props> = ({\n  graph,\n  grid,\n  onTransform,\n  onHover,\n  onSelectNode,\n  ...props\n}: Props) => {\n  const canvasEl = useRef<HTMLCanvasElement>(null)\n  const [{ width, height }, setVisualizationSize] = useState({\n    width: 0,\n    height: 0,\n  })\n\n  useEffect(() => {\n    if (canvasEl && canvasEl.current) {\n      const context = canvasEl.current.getContext('2d')\n      if (context) {\n        const offset: Vector = [width / 2, height / 2]\n        context.save()\n        context.translate(...offset)\n        context.clearRect(-offset[0], -offset[1], width, height)\n        drawGrid(context, grid, width, height, offset)\n        drawGraph(context, graph)\n        return () => context.restore()\n      }\n    }\n  }, [width, height, graph, canvasEl, grid])\n\n  useEffect(() => {\n    const updateCanvasSize = () => {\n      if (canvasEl && canvasEl.current) {\n        const size = getElementSize(canvasEl)\n        setVisualizationSize(size)\n      }\n    }\n\n    updateCanvasSize()\n    window.addEventListener('load', updateCanvasSize)\n    window.addEventListener('resize', updateCanvasSize)\n\n    return () => {\n      window.removeEventListener('resize', updateCanvasSize)\n      window.removeEventListener('load', updateCanvasSize)\n    }\n  }, [width, height, canvasEl])\n\n  useEffect(() => {\n    if (canvasEl && canvasEl.current) {\n      select(canvasEl.current).call(\n        drag<HTMLCanvasElement, unknown>()\n          .clickDistance(2)\n          //.on('start', console.log)\n          .on('drag', e => {\n            onTransform([\n              [1, 0, e.dx],\n              [0, 1, e.dy],\n              [0, 0, 1],\n            ])\n          }),\n        //.on('end', console.log),\n      )\n\n      select(canvasEl.current).call(\n        zoom<HTMLCanvasElement, unknown>()\n          .clickDistance(2)\n          .scaleExtent([0.05, 3])\n          .on('zoom', e => {\n            old = old ?? [\n              [1, 0, -width / 2],\n              [0, 1, -height / 2],\n              [0, 0, 1],\n            ]\n            const { x, y, k } = e.transform\n\n            const zoom = [\n              [k, 0, x - width / 2],\n              [0, k, y - height / 2],\n              [0, 0, 1],\n            ]\n\n            const transform = numeric.dot(zoom, numeric.inv(old)) as Matrix\n            old = zoom\n\n            onTransform(transform)\n          }),\n      )\n    }\n  }, [canvasEl, onTransform, height, width])\n\n  const withCanvasPosition =\n    (\n      func: (position: Vector) => void,\n    ): React.MouseEventHandler<HTMLCanvasElement> =>\n    e => {\n      // https://stackoverflow.com/a/42111623\n      if (canvasEl && canvasEl.current) {\n        const rect = canvasEl.current.getBoundingClientRect()\n        const x = e.clientX - rect.left //x position within the element.\n        const y = e.clientY - rect.top //y position within the element.\n        func([x - width / 2, y - height / 2])\n      }\n    }\n\n  const handleMouseMove = withCanvasPosition(onHover)\n  const handleClick = withCanvasPosition(onSelectNode)\n\n  return (\n    <canvas\n      {...props}\n      ref={canvasEl}\n      onMouseMove={handleMouseMove}\n      // @TODO this piece is very inefficient, we search for a nonexistent node, just to unhighlight everything; but it works\n      onMouseOut={() => onHover([Infinity, Infinity])}\n      width={width}\n      height={height}\n      className={classnames(props.className, 'has-background-dark')}\n      onClick={handleClick}\n    />\n  )\n}\n\nexport default Visualization\n\nfunction getElementSize(elementRef: React.RefObject<HTMLCanvasElement>) {\n  if (elementRef && elementRef.current) {\n    const { clientHeight: height, clientWidth: width } = elementRef.current\n    return { height, width }\n  } else return { height: 0, width: 0 }\n}\n","import React, { useState } from 'react'\nimport Modal from 'react-modal'\n\ninterface Props {\n  onLogin: (oidcIssuer: string) => void\n}\n\nconst LoginPrompt: React.FC<Props> = ({ onLogin, ...props }: Props) => {\n  const [promptOpen, setPromptOpen] = useState(false)\n  const [idp, setIdp] = useState(\n    localStorage.getItem('idp') ?? 'https://solidcommunity.net',\n  )\n\n  const onSubmit: React.FormEventHandler = e => {\n    e.preventDefault()\n    localStorage.setItem('idp', idp)\n    onLogin(idp)\n  }\n\n  const onChangeInput = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault()\n    const newValue = e.currentTarget.value\n    setIdp(newValue)\n  }\n\n  if (!promptOpen) {\n    return (\n      <>\n        <button\n          {...props}\n          onClick={e => {\n            e.preventDefault()\n            setPromptOpen(true)\n          }}\n        >\n          Login\n        </button>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Modal\n        isOpen={promptOpen}\n        onRequestClose={() => setPromptOpen(false)}\n        contentLabel=\"Connect your Solid Pod\"\n        overlayClassName={{\n          base: 'modal modal-background is-active',\n          afterOpen: '',\n          beforeClose: '',\n        }}\n        className={{\n          base: 'modal-content',\n          afterOpen: '',\n          beforeClose: '',\n        }}\n        closeTimeoutMS={50}\n      >\n        <button className=\"modal-close\" onClick={() => setPromptOpen(false)}>\n          close\n        </button>\n\n        <div className=\"card\">\n          <header className=\"card-header\">\n            <p className=\"card-header-title\">\n              Select your Solid identity provider\n            </p>\n          </header>\n          <div className=\"card-content\">\n            <form onSubmit={onSubmit}>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <input\n                    id=\"idp\"\n                    className=\"input\"\n                    type=\"url\"\n                    value={idp}\n                    onChange={onChangeInput}\n                    placeholder=\"Where is your Solid Pod?\"\n                  />\n                </div>\n              </div>\n              <div className=\"field\">\n                <div className=\"control\">\n                  <input\n                    type=\"submit\"\n                    value=\"Connect\"\n                    className=\"button is-link\"\n                  />\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </Modal>\n    </>\n  )\n}\n\nexport default LoginPrompt\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import {\n  login as solidLogin,\n  logout as solidLogout,\n  handleIncomingRedirect,\n} from '@inrupt/solid-client-authn-browser'\n\nexport const init = async () => {\n  const sessionInfo = await handleIncomingRedirect({\n    url: window.location.href,\n    restorePreviousSession: true,\n  })\n  return sessionInfo\n}\n\nexport const login = async (oidcIssuer: string) => {\n  try {\n    await solidLogin({\n      oidcIssuer,\n      redirectUrl: window.location.href,\n      clientName: 'Friends Crawler',\n    })\n  } catch (error) {\n    alert(`Could not find a Solid Pod at ${oidcIssuer}`)\n    localStorage.removeItem('idp')\n  }\n}\n\nexport const logout = async () => {\n  await solidLogout()\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../../app/store'\nimport * as api from './loginAPI'\n\n// State\nexport interface LoginState {\n  webId: string\n  isLoggedIn: boolean\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: LoginState = {\n  webId: '',\n  isLoggedIn: false,\n  status: 'idle',\n}\n\n// Thunks\nexport const init = createAsyncThunk('login/init', async () => {\n  const response = await api.init()\n  return response\n})\n\nexport const login = createAsyncThunk(\n  'login/login',\n  async (oidcIssuer: string) => {\n    const response = await api.login(oidcIssuer)\n    return response\n  },\n)\n\nexport const logout = createAsyncThunk('login/logout', async () => {\n  await api.logout()\n})\n\n// Slice\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(init.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(init.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.webId = action.payload?.webId ?? ''\n        state.isLoggedIn = action.payload?.isLoggedIn ?? false\n      })\n      .addCase(login.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(login.fulfilled, state => {\n        state.status = 'idle'\n      })\n      .addCase(logout.pending, state => {\n        state.status = 'loading'\n      })\n      .addCase(logout.fulfilled, () => {\n        return initialState\n      })\n  },\n})\n\n// Selectors\nexport const selectSession = (state: RootState) => ({\n  webId: state.login.webId,\n  isLoggedIn: state.login.isLoggedIn,\n})\n\nexport const selectLoginStatus = (state: RootState) => state.login.status\n\nexport default loginSlice.reducer\n","import React from 'react'\nimport LoginPrompt from './LoginPrompt'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport { login, logout, selectLoginStatus, selectSession } from './loginSlice'\n\ninterface Props {\n  className?: string\n}\n\nconst Login: React.FC<Props> = (\n  { className, ...props }: Props = { className: '' },\n) => {\n  const dispatch = useAppDispatch()\n  const info = useAppSelector(selectSession)\n  const status = useAppSelector(selectLoginStatus)\n\n  const commonProps = {\n    ...props,\n    className: `${className} button`,\n  }\n\n  return status === 'loading' ? (\n    <button {...commonProps} disabled>\n      Loading\n    </button>\n  ) : info.isLoggedIn ? (\n    <button {...commonProps} onClick={() => dispatch(logout())}>\n      {info.webId} Logout\n    </button>\n  ) : (\n    <LoginPrompt\n      {...commonProps}\n      onLogin={oidcIssuer => dispatch(login(oidcIssuer))}\n    />\n  )\n}\n\nexport default Login\n","import { Vector, Grid, VisualizationGraph } from '../types'\nimport numeric from 'numeric'\n\ntype Options = Partial<CanvasRenderingContext2D>\n\nconst drawText = (\n  context: CanvasRenderingContext2D,\n  [x, y]: Vector,\n  text: string,\n  options: Options,\n) => {\n  context.font = '20px Arial'\n  context.textBaseline = 'middle'\n  context.textAlign = 'left'\n  // context.fillStyle = '#fff7'\n  Object.assign(context, options)\n  context.fillText(text, x, y)\n}\n\nconst drawCircle = (\n  context: CanvasRenderingContext2D,\n  [x, y]: Vector,\n  radius: number,\n  options: Options,\n) => {\n  Object.assign(context, options)\n  context.beginPath()\n  context.arc(x, y, radius, 0, 2 * Math.PI)\n  context.fill()\n}\n\nconst drawLine = (\n  context: CanvasRenderingContext2D,\n  start: Vector,\n  end: Vector,\n  options: Options,\n) => {\n  Object.assign(context, options)\n\n  context.beginPath()\n  context.moveTo(...start)\n  context.lineTo(...end)\n  context.stroke()\n}\n\nexport const drawGraph = (\n  context: CanvasRenderingContext2D,\n  graph: VisualizationGraph,\n) => {\n  graph.links.forEach(link => {\n    // we're counting a unit vector to make links that don't overlap nodes\n    // source point\n    const s = [link.source.x, link.source.y]\n    // target point\n    const t = [link.target.x, link.target.y]\n    // vector\n    const v = numeric.sub(t, s)\n    // vector size\n    const size = Math.sqrt(v[0] ** 2 + v[1] ** 2)\n    // unit vector\n    const i = numeric.div(v, size)\n    drawLine(\n      context,\n      // links don't overlap circles\n      numeric.add(s, numeric.mul(i, link.source.r)) as Vector,\n      numeric.sub(t, numeric.mul(i, link.target.r)) as Vector,\n      {\n        strokeStyle: 'white',\n        lineWidth: 0.5,\n      },\n    )\n  })\n\n  const color = {\n    accent: 'violet',\n    focus: 'red',\n    focus2: 'pink',\n    rest: {\n      node: '#fff8',\n      label: '#fff4',\n    },\n  }\n\n  const accented = graph.nodes.filter(({ style }) => style === 'accent')\n  const focused = graph.nodes.filter(({ style }) => style === 'focus')\n  const focused2 = graph.nodes.filter(({ style }) => style === 'focus2')\n  const rest = graph.nodes.filter(({ style }) => !style)\n\n  // draw all the nodes which are not special\n  rest.forEach(({ x, y, r }) =>\n    drawCircle(context, [x, y], r, { fillStyle: color.rest.node }),\n  )\n\n  rest.forEach(({ x, y, r, label }) =>\n    drawText(context, [x + r + 5, y], label, {\n      fillStyle: color.rest.label,\n    }),\n  )\n\n  // draw focused nodes\n  focused2.forEach(({ x, y, r }) =>\n    drawCircle(context, [x, y], r, { fillStyle: color.focus2 }),\n  )\n\n  focused2.forEach(({ x, y, r, label }) =>\n    drawText(context, [x + r + 5, y], label, { fillStyle: color.focus2 }),\n  )\n\n  // draw focused nodes\n  focused.forEach(({ x, y, r }) =>\n    drawCircle(context, [x, y], r, { fillStyle: color.focus }),\n  )\n\n  focused.forEach(({ x, y, r, label }) =>\n    drawText(context, [x + r + 5, y], label, { fillStyle: color.focus }),\n  )\n\n  // draw accented nodes\n  accented.forEach(({ x, y, r }) =>\n    drawCircle(context, [x, y], r, { fillStyle: color.accent }),\n  )\n\n  accented.forEach(({ x, y, r, label }) =>\n    drawText(context, [x + r + 5, y], label, {\n      fillStyle: color.accent,\n    }),\n  )\n}\n\nexport const drawGrid = (\n  context: CanvasRenderingContext2D,\n  grid: Grid,\n  width: number,\n  height: number,\n  offset: Vector = [0, 0],\n) => {\n  const strokeStyle = '#fff2'\n  const min1 = -offset[1]\n  const max1 = height - offset[1]\n  const min0 = -offset[0]\n  const max0 = width - offset[0]\n\n  const getLineWidth = (i: number) =>\n    i === 0 ? 2 : i % grid.highlight === 0 ? 1 : 0.5\n\n  let i = 0\n  while (i * grid.distance + grid.origin[0] <= max0) {\n    const x = i * grid.distance + grid.origin[0]\n    if (x >= min0) {\n      drawLine(context, [x, min1], [x, max1], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i++\n  }\n\n  i = -1\n  while (i * grid.distance + grid.origin[0] >= min0) {\n    const x = i * grid.distance + grid.origin[0]\n    if (x <= max0) {\n      drawLine(context, [x, min1], [x, max1], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i--\n  }\n\n  i = 0\n  while (i * grid.distance + grid.origin[1] <= max1) {\n    const y = i * grid.distance + grid.origin[1]\n    if (y >= min1) {\n      drawLine(context, [min0, y], [max0, y], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i++\n  }\n\n  i = -1\n  while (i * grid.distance + grid.origin[1] >= min1) {\n    const y = i * grid.distance + grid.origin[1]\n    if (y <= max1) {\n      drawLine(context, [min0, y], [max0, y], {\n        strokeStyle,\n        lineWidth: getLineWidth(i),\n      })\n    }\n    i--\n  }\n}\n","import graphlib, { Graph } from 'graphlib'\n// import { Dependency } from './simulation/types'\n// import findCyclesAdjacency from 'elementary-circuits-directed-graph'\nimport { Graph as AbstractGraph } from './mathSlice'\n\nfunction pruneCore(graph: Graph) {\n  if (!graphlib.alg.isAcyclic(graph)) {\n    // const cycles = graphlib.alg.findCycles(graph);\n    throw new Error('pruning is possible on DAG only')\n  }\n  const edges = graph.edges()\n  edges.forEach(edge => {\n    // remove edge\n    graph.removeEdge(edge)\n    // see if another path exists\n    const paths = graphlib.alg.dijkstra(graph, edge.v)\n    // if the other path doesn't exist, add the node back\n    if (paths[edge.w].distance === Infinity) {\n      graph.setEdge(edge)\n    }\n  })\n  return graph\n}\n\nexport const prune = (input: AbstractGraph): AbstractGraph => {\n  const graph = new graphlib.Graph()\n\n  Object.values(input).forEach(node => {\n    graph.setNode(node.uri)\n\n    Object.values(node.dependencies).forEach(dependency =>\n      graph.setEdge(node.uri, dependency.uri),\n    )\n  })\n\n  const output: AbstractGraph = Object.fromEntries(\n    Object.entries(input).map(([uri, node]) => [\n      uri,\n      { ...node, dependencies: {} },\n    ]),\n  )\n\n  const prunedEdges = pruneCore(graph)\n    .edges()\n    .map(({ v: source, w: target }) => ({ source, target }))\n\n  prunedEdges.forEach(({ source, target }) => {\n    output[source].dependencies[target] = output[target]\n  })\n\n  return output\n}\n\n/*\nexport function getCycles(dependencies: Dependency[]): Dependency[][] {\n  const nodes = Array.from(\n    new Set([\n      ...dependencies.map(d => d.dependent),\n      ...dependencies.map(d => d.dependency),\n    ]),\n  )\n  const nodeIndexes = Object.fromEntries(\n    Object.entries(nodes).map(([key, value]) => [value, +key]),\n  )\n\n  const adjacency = Array(nodes.length)\n    .fill(null)\n    .map(() => [] as number[])\n  dependencies.forEach(({ dependent, dependency }) => {\n    const dependentIndex = nodeIndexes[dependent]\n    const dependencyIndex = nodeIndexes[dependency]\n    adjacency[dependentIndex].push(dependencyIndex)\n  })\n\n  // try to detect loops (cycles of length 1)\n  // this is due to the limits of the findCyclesAdjacency, which fails to detect loops\n  // https://github.com/antoinerg/elementary-circuits-directed-graph/issues/13\n  // @TODO remove loop detection when the issue is fixed\n  const loops = adjacency.reduce((loops, adj, i) => {\n    if (adj.includes(i)) loops.push([i, i])\n    return loops\n  }, [] as number[][])\n\n  const rawCycles = loops.length > 0 ? loops : findCyclesAdjacency(adjacency)\n\n  const simpleCycles = rawCycles.map(cycle =>\n    cycle.slice(0, -1).map(i => nodes[i]),\n  )\n\n  return simpleCycles\n    .map(cycle => simpleCycleToCycle(cycle, dependencies))\n    .sort((a, b) => a.length - b.length)\n    .slice(0, 5)\n}\n\nfunction simpleCycleToCycle(\n  simpleCycle: string[],\n  dependencies: Dependency[],\n): Dependency[] {\n  return simpleCycle.map((uri, index) => {\n    const dependent = simpleCycle[index]\n    const dependency = simpleCycle[(index + 1) % simpleCycle.length]\n    return (\n      dependencies.find(\n        d => d.dependency === dependency && d.dependent === dependent,\n      ) || {\n        dependent,\n        dependency,\n        doc: '',\n      }\n    )\n  })\n  }\n  */\n","import {\n  getSolidDataset,\n  UrlString,\n  getThingAll,\n  getTermAll,\n  getTerm,\n  getThing,\n  asUrl,\n} from '@inrupt/solid-client'\nimport { fetch } from '@inrupt/solid-client-authn-browser'\nimport { rdf, rdfs, solid } from 'rdf-namespaces'\nimport { Definition, Statement } from './mathSlice'\n\ninterface Graph {\n  nodes: (Definition | Statement)[]\n  links: [string, string][]\n}\n\nexport const fetchGraph = async (uri: UrlString): Promise<Graph> => {\n  const dataset = await getSolidDataset(uri, { fetch })\n  const things = getThingAll(dataset)\n  const graph: Graph = { nodes: [], links: [] }\n  things.forEach(thing => {\n    const uri = asUrl(thing)\n    const type = getTerm(thing, rdf.type)?.value ?? ''\n    const description = getTerm(thing, rdf.value)?.value ?? ''\n    const label = getTerm(thing, rdfs.label)?.value ?? ''\n    switch (type) {\n      case 'https://terms.math.livegraph.org#Definition':\n        graph.nodes.push({\n          id: uri,\n          type: 'definition',\n          label: { en: label },\n          description: { en: description },\n          dependencies: [],\n          dependents: [],\n          examples: [],\n          created: 0,\n          updated: 0,\n        })\n        break\n      case 'https://terms.math.livegraph.org#Statement':\n        graph.nodes.push({\n          id: uri,\n          type: 'statement',\n          label: { en: label },\n          description: { en: description },\n          dependencies: [],\n          dependents: [],\n          examples: [],\n          proofs: [],\n          created: 0,\n          updated: 0,\n        })\n        break\n      default:\n        break\n    }\n    getTermAll(thing, 'https://terms.math.livegraph.org#dependsOn').forEach(\n      dependency => {\n        graph.links.push([uri, dependency.value])\n      },\n    )\n  })\n  return graph\n}\n\nexport const findMathDocumentsOfPerson = async (\n  webId: string,\n): Promise<string[]> => {\n  if (webId) {\n    const dataset = await getSolidDataset(webId, { fetch })\n    const me = getThing(dataset, webId)\n    if (me) {\n      const publicTypeIndex = getTerm(me, solid.publicTypeIndex)?.value\n      if (publicTypeIndex) {\n        const index = await getSolidDataset(publicTypeIndex, { fetch })\n        const things = getThingAll(index)\n        const mathDocuments = things\n          .filter(thing =>\n            getTermAll(thing, solid.forClass)\n              .map(a => a.value)\n              .includes('https://terms.math.livegraph.org#Definition'),\n          )\n          .map(thing => getTermAll(thing, solid.instance))\n          .flat()\n          .map(a => a.value)\n        return mathDocuments\n      }\n    }\n  }\n  return ['https://mrkvon.solidcommunity.net/public/math/graph-theory.ttl']\n}\n","import {\n  createSlice,\n  createAsyncThunk,\n  createSelector,\n  PayloadAction,\n} from '@reduxjs/toolkit'\nimport { prune } from './algorithms'\nimport { RootState } from '../../app/store'\nimport * as api from './mathAPI'\nimport { Dictionary } from '../../app/types'\n\ninterface LanguageString extends Dictionary<string> {\n  en: string // a default language, we always expect it to be there\n  // eventually we'll generalize this\n}\n\ninterface Node {\n  id: string\n  description: LanguageString\n  label: LanguageString\n  type: string\n  created: number\n  updated: number\n  // there'll also be citation here\n  // examples and proofs will probably extend this\n  // and we need to figure out where to keep solid documents\n}\n\ninterface DefinitionOrStatement extends Node {\n  dependencies: string[]\n  dependents: string[]\n  examples: string[] // to be implemented\n}\n\nexport interface Definition extends DefinitionOrStatement {\n  type: 'definition'\n}\n\nexport interface Statement extends DefinitionOrStatement {\n  type: 'statement'\n  proofs: string[] // to be implemented\n}\n\nexport interface MathDocument {\n  id: string\n}\n\ninterface Entity<EntityType> {\n  byId: Dictionary<EntityType>\n  allIds: string[]\n}\n\nexport interface MathState {\n  entities: {\n    node: Entity<Definition | Statement>\n    document: Entity<MathDocument>\n    // we'll add examples and proofs and citations here\n  }\n  ui: {\n    highlighted: string\n    selected: string\n  }\n  search: {\n    query: string\n  }\n}\n\nconst initialState: MathState = {\n  entities: {\n    node: {\n      byId: {},\n      allIds: [],\n    },\n    document: {\n      byId: {},\n      allIds: [],\n    },\n  },\n  ui: {\n    highlighted: '',\n    selected: '',\n  },\n  search: {\n    query: '',\n  },\n}\n\n// Thunks\nexport const addDocuments = createAsyncThunk(\n  'math/addDocuments',\n  async (webId: string) => {\n    const documents = await api.findMathDocumentsOfPerson(webId)\n    return documents\n  },\n)\n\nexport const addGraph = createAsyncThunk(\n  'math/addGraph',\n  async (uri: string) => {\n    return await api.fetchGraph(uri)\n  },\n)\n\nexport const mathSlice = createSlice({\n  name: 'math',\n  initialState,\n  reducers: {\n    highlight: (state, action: PayloadAction<string>) => {\n      state.ui.highlighted = action.payload\n    },\n    select: (state, action: PayloadAction<string>) => {\n      state.ui.selected = action.payload\n    },\n    setSearch: (state, action: PayloadAction<string>) => {\n      state.search.query = action.payload\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(addDocuments.fulfilled, (state, action) => {\n        state.entities.document = {\n          byId: Object.fromEntries(action.payload.map(id => [id, { id }])),\n          allIds: action.payload,\n        }\n      })\n      .addCase(addGraph.fulfilled, (state, action) => {\n        const { nodes, links } = action.payload\n        nodes.forEach(node => {\n          state.entities.node.byId[node.id] = node\n          state.entities.node.allIds.push(node.id)\n        })\n        links.forEach(([dependent, dependency]) => {\n          state.entities.node.byId[dependent].dependencies.push(dependency)\n          state.entities.node.byId[dependency].dependents.push(dependent)\n        })\n      })\n  },\n})\n\nexport const { highlight, select, setSearch } = mathSlice.actions\n\n// Selectors\nconst selectGraphNodes = (state: RootState) => state.math.entities.node\n\ninterface EnrichedDefinition\n  extends Omit<Definition, 'dependents' | 'dependencies' | 'id'> {\n  uri: string\n  dependents: Dictionary<EnrichedDefinition | EnrichedStatement>\n  dependencies: Dictionary<EnrichedDefinition | EnrichedStatement>\n}\n\ninterface EnrichedStatement\n  extends Omit<Statement, 'dependents' | 'dependencies' | 'id'> {\n  uri: string\n  dependents: Dictionary<EnrichedDefinition | EnrichedStatement>\n  dependencies: Dictionary<EnrichedDefinition | EnrichedStatement>\n}\n\nexport type GraphNode = EnrichedDefinition | EnrichedStatement\n\nexport type Graph = Dictionary<GraphNode>\n\nexport const selectGraph = createSelector(selectGraphNodes, ({ byId }) => {\n  const enrichedNodes: Graph = Object.fromEntries(\n    Object.entries(byId).map(([id, { id: uri, ...node }]) => [\n      id,\n      {\n        ...node,\n        uri,\n        dependencies: {},\n        dependents: {},\n      },\n    ]),\n  )\n\n  Object.entries(enrichedNodes).forEach(([id, enrichedNode]) => {\n    enrichedNode.dependencies = Object.fromEntries(\n      byId[id].dependencies.map(id => [id, enrichedNodes[id]]),\n    )\n    enrichedNode.dependents = Object.fromEntries(\n      byId[id].dependents.map(id => [id, enrichedNodes[id]]),\n    )\n  })\n\n  return enrichedNodes\n})\n\nexport const selectPrunedGraph = createSelector(selectGraph, graph =>\n  prune(graph),\n)\n\nexport const selectSearch = (state: RootState) => state.math.search.query\n\nexport const selectHighlighted = (state: RootState) => state.math.ui.highlighted\nexport const selectSelected = (state: RootState) => state.math.ui.selected\n\nconst selectNodeDependencies = (uri: string, graph: Graph): string[] =>\n  uri ? Object.values(graph[uri]?.dependencies ?? {}).map(node => node.uri) : []\n\nexport const selectSelectedNodeDependencies = createSelector(\n  selectSelected,\n  selectGraph,\n  selectNodeDependencies,\n)\n\nexport const selectSearchResults = createSelector(\n  selectSearch,\n  selectGraph,\n  (query: string, graph: Graph): { label: string; value: string }[] => {\n    if (query.length < 2) return []\n    return Object.values(graph)\n      .filter(\n        ({ label }) => label.en.toLowerCase().includes(query.toLowerCase()),\n        //*|| uri.toLowerCase().includes(query.toLowerCase()),\n      )\n      .sort(\n        ({ dependents: a }, { dependents: b }) =>\n          Object.values(b).length - Object.values(a).length,\n      )\n      .map(({ uri, label: { en: label } }) => ({ value: uri, label }))\n      .slice(0, 10)\n  },\n)\n\nexport const selectSelectedNode = createSelector(\n  selectSelected,\n  selectGraph,\n  (uri, graph) => graph[uri],\n)\n\nexport default mathSlice.reducer\n","import {\n  forceSimulation,\n  forceCollide,\n  forceLink,\n  forceManyBody,\n  forceCenter,\n  forceX,\n  forceY,\n  ForceLink,\n} from 'd3-force'\nimport { Dictionary } from '../../../../app/types'\nimport forceGravity from './gravity'\nimport {\n  Coords,\n  SimulationNode,\n  SimulationLink,\n  Node,\n  SimulationNodeExt,\n  SimulationLinkExt,\n} from './types'\n\nexport default class Simulation {\n  nodes: SimulationNodeExt[] = []\n  links: SimulationLinkExt[] = []\n\n  runs = false\n\n  simulation = forceSimulation()\n    .alphaDecay(0.005)\n    .force(\n      'link',\n      forceLink()\n        .id(node => (node as SimulationNodeExt).uri)\n        .distance(50)\n        .strength(0.1),\n    )\n    .force('linkGravity', forceGravity().strength(50))\n    .force('charge', forceManyBody().strength(-150).distanceMax(500))\n    .force('gravityX', forceX(0).strength(0.01))\n    .force('gravityY', forceY(0).strength(0.01))\n    .force(\n      'collide',\n      forceCollide(({ r }: SimulationNodeExt) => r + 5),\n    )\n    .force('center', forceCenter(0, 0))\n    .stop()\n\n  start = ({\n    nodes,\n    links,\n    onTick,\n  }: {\n    nodes: SimulationNode[]\n    links: SimulationLink[]\n    onTick: (simulation: {\n      nodes: SimulationNode[]\n      links: SimulationLinkExt[]\n    }) => void\n  }) => {\n    this.nodes = nodes as SimulationNodeExt[]\n    this.links = links.map(link => ({ ...link })) as SimulationLinkExt[]\n\n    this.simulation.nodes(this.nodes)\n    ;(\n      this.simulation.force('link') as ForceLink<\n        SimulationNodeExt,\n        SimulationLinkExt\n      >\n    ).links(this.links)\n    ;(\n      this.simulation.force('linkGravity') as ForceLink<\n        SimulationNodeExt,\n        SimulationLinkExt\n      >\n    ).links(this.links)\n\n    this.simulation.on('tick', () => {\n      onTick({\n        nodes: this.nodes as SimulationNode[],\n        links: this.links,\n      })\n    })\n\n    this.simulation.restart()\n    this.runs = true\n  }\n\n  stop = () => {\n    this.runs = false\n    return this.simulation.stop()\n  }\n\n  update = ({ nodes, links }: { nodes: Node[]; links: SimulationLink[] }) => {\n    this.simulation.stop()\n    // combine current nodes and the old nodes\n    const thisNodeDict: Dictionary<SimulationNodeExt> = Object.fromEntries(\n      this.nodes.map(node => [node.uri, node]),\n    )\n    const updatedNodes: SimulationNodeExt[] = nodes.map(node => ({\n      ...node,\n      x: (0.5 - Math.random()) * 800,\n      y: (0.5 - Math.random()) * 800,\n      ...thisNodeDict[node.uri],\n      r: node.r,\n    }))\n    this.nodes = updatedNodes\n    this.links = links.map(link => ({ ...link })) as SimulationLinkExt[]\n\n    this.simulation.nodes(this.nodes)\n    ;(\n      this.simulation.force('link') as ForceLink<\n        SimulationNodeExt,\n        SimulationLinkExt\n      >\n    ).links(this.links)\n    ;(\n      this.simulation.force('linkGravity') as ForceLink<\n        SimulationNodeExt,\n        SimulationLinkExt\n      >\n    ).links(this.links)\n\n    this.simulation.alpha(1).restart()\n  }\n\n  selectNode = ({ x, y }: Coords) =>\n    this.simulation.find(x, y, 40) as SimulationNodeExt\n}\n","import { SimulationLinkExt } from './types'\n\nexport default function gravity() {\n  let links: SimulationLinkExt[] = []\n  let strength = 3\n  function force(alpha: number) {\n    const k = strength * alpha\n    links.forEach(function (d) {\n      //// this works\n      // d.source.y = Math.max(d.target.y + 50, d.source.y);\n      //// this is original\n      // d.source.vy += k;\n      // d.target.vy -= k;\n      //\n      //// this works with velocities, so the graph looks less layered\n      const { source, target } = d\n      if (typeof source === 'object' && typeof target === 'object') {\n        if (\n          source.y &&\n          target.y &&\n          source.vy &&\n          target.vy &&\n          source.y < target.y + 50\n        ) {\n          const optimumDifference = (target.y + 50 - source.y) / 50\n          source.vy += k * optimumDifference\n          target.vy -= k * optimumDifference\n        }\n      }\n    })\n  }\n\n  force.links = (_: SimulationLinkExt[]) => {\n    links = _\n    return force\n  }\n\n  force.strength = (_: number) => {\n    strength = _\n    return force\n  }\n\n  return force\n}\n","/*\n * based on the following example\n * https://github.com/rexxars/react-markdown/issues/10#issuecomment-347763068\n */\n\nimport React from 'react'\nimport 'katex/dist/katex.min.css'\nimport ReactMarkdown from 'react-markdown'\nimport remarkMath from 'remark-math'\nimport styled from 'styled-components'\nimport rehypeKatex from 'rehype-katex'\n\nconst Styler = styled.div`\n  img {\n    max-width: 100%;\n  }\n`\n\nexport default function Math({ children }: { children: string }) {\n  const props = {\n    children,\n    remarkPlugins: [remarkMath],\n    rehypePlugins: [rehypeKatex],\n  }\n  return (\n    <Styler>\n      <ReactMarkdown {...props} />\n    </Styler>\n  )\n}\n","import React from 'react'\nimport { GraphNode, highlight, select, selectSelectedNode } from './mathSlice'\nimport Math from './Math'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\n\ninterface NodeListProps {\n  title: string\n  nodes: GraphNode[]\n}\n\nconst NodeList: React.FC<NodeListProps> = ({ title, nodes }: NodeListProps) => {\n  const dispatch = useAppDispatch()\n  return (\n    <>\n      <header className=\"card-header\">\n        <p className=\"card-header-title\">\n          {title}: {nodes.length}\n        </p>\n      </header>\n      <section className=\"card-content\">\n        <ul className=\"buttons are-small\">\n          {nodes.map(node => (\n            <li\n              onClick={() => dispatch(select(node.uri))}\n              onMouseEnter={() => dispatch(highlight(node.uri))}\n              onMouseLeave={() => dispatch(highlight(''))}\n              key={node.uri}\n              className=\"button is-link is-inverted\"\n            >\n              {node.label.en}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </>\n  )\n}\n\nconst Statement = () => {\n  const dispatch = useAppDispatch()\n  const onSelectNode = (uri: string) => dispatch(select(uri))\n  const node = useAppSelector(selectSelectedNode)\n\n  const dependencies: GraphNode[] = Object.values(node.dependencies)\n  const dependents: GraphNode[] = Object.values(node.dependents)\n\n  return (\n    <div className=\"card\">\n      <header className=\"card-header\">\n        <p className=\"card-header-title\">\n          <a href={node.uri}>{node.label.en}</a>\n        </p>\n        <span className=\"card-header-icon\">\n          <button\n            className=\"delete\"\n            aria-label=\"close\"\n            onClick={() => onSelectNode('')}\n          >\n            close\n          </button>\n        </span>\n      </header>\n      <section className=\"card-content\">\n        <Math>{node.description.en}</Math>\n      </section>\n      <NodeList title=\"dependencies\" nodes={dependencies} />\n      <NodeList title=\"dependents\" nodes={dependents} />\n    </div>\n  )\n}\n\nexport default Statement\n","import React from 'react'\nimport { useAppDispatch, useAppSelector } from '../../app/hooks'\nimport {\n  highlight,\n  select,\n  selectSearch,\n  selectSearchResults,\n  setSearch,\n} from './mathSlice'\n\nconst Search: React.FC = ({ ...props }) => {\n  const value = useAppSelector(selectSearch)\n  const options = useAppSelector(selectSearchResults)\n  const dispatch = useAppDispatch()\n\n  return (\n    <div {...props} className=\"box p-0\">\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search\"\n        value={value}\n        onChange={e => dispatch(setSearch(e.target.value))}\n      />\n      <div className=\"menu\">\n        <ul className=\"menu-list\">\n          {options.map(({ value, label }) => (\n            <li\n              key={value}\n              title={value}\n              onMouseEnter={() => dispatch(highlight(value))}\n              onMouseLeave={() => dispatch(highlight(''))}\n            >\n              <a\n                onClick={() => {\n                  dispatch(select(value))\n                  dispatch(setSearch(''))\n                }}\n              >\n                {label}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ICOutside = styled.div`\n  position: fixed;\n  width: 100%;\n  top: 0;\n  bottom: 0;\n  pointer-events: none;\n  overflow-x: hidden;\n  overflow-y: auto;\n`\nconst ICInside = styled.div`\n  pointer-events: all;\n  overflow-x: auto;\n  width: 100%;\n`\n\nconst InfoContainer = ({ children }: { children: React.ReactNode }) => (\n  <ICOutside>\n    <div className=\"columns mr-1 mt-6\">\n      <div className=\"column is-one-quarter is-offset-three-quarters\">\n        <ICInside>{children}</ICInside>\n      </div>\n    </div>\n  </ICOutside>\n)\n\nexport default InfoContainer\n","import { Grid, Matrix, Vector } from '../types'\nimport { VisualizationGraph } from '../types'\nimport { GraphNode } from '../../mathSlice'\nimport { SimulationGraph } from '../simulation/types'\nimport numeric from 'numeric'\n\nexport const transform = (matrix: Matrix, vector: Vector): Vector => {\n  const raw = numeric.dot(matrix, numeric.transpose([[...vector, 1]])) as Matrix\n  const [[x], [y]] = raw\n  return [x, y]\n}\n\nexport const nodeRadius = (node: GraphNode): number => {\n  let count = Object.entries(node.dependents).length ?? 0\n  count = count < 1 ? 1 : count\n  return count ** 0.42 * 5\n}\n\nexport const basicGrid: Grid = {\n  origin: [0, 0],\n  distance: 20,\n  highlight: 5,\n}\n\nexport const transformGrid = (matrix: Matrix, grid: Grid): Grid => {\n  let distance = grid.distance * matrix[0][0]\n  while (distance < 20) {\n    distance *= 5\n  }\n  return {\n    origin: transform(matrix, grid.origin),\n    distance,\n    highlight: grid.highlight,\n  }\n}\n\nexport const transformLayout = (\n  matrix: Matrix,\n  graph: SimulationGraph,\n  highlighted: string,\n  selected: string,\n  selectedDependencies: string[],\n): VisualizationGraph => {\n  const transformedNodesDict = Object.fromEntries(\n    graph.nodes.map(node => {\n      const [x, y] = transform(matrix, [node.x, node.y])\n      const r = matrix[0][0] * node.r\n      return [node.uri, { ...node, x, y, r, style: '' }]\n    }),\n  )\n\n  selectedDependencies.forEach(\n    uri => (transformedNodesDict[uri].style = 'focus2'),\n  )\n\n  if (highlighted) {\n    transformedNodesDict[highlighted].style = 'accent'\n  }\n\n  if (selected) {\n    transformedNodesDict[selected].style = 'focus'\n  }\n\n  const links = graph.links.map(link => {\n    const sourceUri =\n      typeof link.source === 'string'\n        ? link.source\n        : typeof link.source === 'number'\n        ? graph.nodes[link.source].uri\n        : link.source.uri\n    const targetUri =\n      typeof link.target === 'string'\n        ? link.target\n        : typeof link.target === 'number'\n        ? graph.nodes[link.target].uri\n        : link.target.uri\n    const source = transformedNodesDict[sourceUri]\n    const target = transformedNodesDict[targetUri]\n    return { source, target }\n  })\n\n  return { nodes: Object.values(transformedNodesDict), links }\n}\n","import React, { useEffect, useState } from 'react'\nimport Visualization from './Visualization'\nimport {\n  highlight,\n  select,\n  selectHighlighted,\n  selectSelected,\n  selectSelectedNodeDependencies,\n} from '../mathSlice'\nimport Simulation from './simulation'\nimport { SimulationGraph, SimulationLink } from './simulation/types'\nimport { Matrix, Vector } from './types'\nimport numeric from 'numeric'\nimport Statement from '../Statement'\nimport Search from '../Search'\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks'\nimport { selectPrunedGraph } from '../mathSlice'\nimport InfoContainer from '../InfoContainer'\nimport {\n  basicGrid,\n  nodeRadius,\n  transform,\n  transformGrid,\n  transformLayout,\n} from './helpers/transform'\n\nconst VisualizationContainer: React.FC = props => {\n  const prunedGraph = useAppSelector(selectPrunedGraph)\n  const highlightedNode = useAppSelector(selectHighlighted)\n  const selectedNode = useAppSelector(selectSelected)\n  const selectedNodeDependencies = useAppSelector(\n    selectSelectedNodeDependencies,\n  )\n  const dispatch = useAppDispatch()\n\n  const [simulation] = useState(new Simulation())\n  const [layout, setLayout] = useState<SimulationGraph>({\n    nodes: [],\n    links: [],\n  })\n  // transformation matrix\n  const [matrix, setMatrix] = useState<Matrix>([\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ])\n\n  // initialize simulation\n  useEffect(() => {\n    let lastUpdate = Date.now() - 20\n    simulation.start({\n      nodes: [],\n      links: [],\n      onTick: ({ nodes, links }) => {\n        const now = Date.now()\n        if (now > lastUpdate + 20) {\n          setLayout({ nodes: [...nodes], links: [...links] })\n          lastUpdate = now\n        }\n      },\n    })\n    return () => {\n      simulation.stop()\n    }\n  }, [simulation])\n\n  // when graph changes, update simulation\n  useEffect(() => {\n    const nodes = Object.values(prunedGraph).map(node => ({\n      label: node.label.en,\n      x: Math.random() * 400,\n      y: Math.random() * 400,\n      r: nodeRadius(node),\n      uri: node.uri,\n    }))\n\n    const links: SimulationLink[] = Object.values(prunedGraph).reduce(\n      (links, { uri: source, dependencies }) => {\n        Object.keys(dependencies).forEach(target =>\n          links.push({ source, target }),\n        )\n        return links\n      },\n      [] as SimulationLink[],\n    )\n\n    simulation.update({ nodes, links })\n  }, [prunedGraph, simulation])\n\n  const handleTransform = (matrix: Matrix): void => {\n    setMatrix(prevMatrix => numeric.dot(matrix, prevMatrix) as Matrix)\n  }\n\n  const withNode = (action: (uri: string) => unknown) => {\n    return (position: Vector): void => {\n      // first transform to local coordinates\n      const [x, y] = transform(numeric.inv(matrix), position)\n      // then find the node in simulation\n      action(simulation.selectNode({ x, y })?.uri)\n    }\n  }\n\n  const handleHover = withNode(uri => dispatch(highlight(uri)))\n  const handleSelect = withNode(uri => dispatch(select(uri)))\n\n  // transform layout to TransformedLayout\n  const transformedLayout = transformLayout(\n    matrix,\n    layout,\n    highlightedNode,\n    selectedNode,\n    selectedNodeDependencies,\n  )\n\n  const grid = transformGrid(matrix, basicGrid)\n\n  return (\n    <>\n      <Visualization\n        graph={transformedLayout}\n        grid={grid}\n        onTransform={handleTransform}\n        onHover={handleHover}\n        onSelectNode={handleSelect}\n        {...props}\n      />\n\n      {\n        // @TODO maybe move this stuff out, it's more of a Layout component\n      }\n      <InfoContainer>{selectedNode ? <Statement /> : <Search />}</InfoContainer>\n    </>\n  )\n}\n\nexport default VisualizationContainer\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Link = styled.a`\n  color: lightgray;\n  &:hover {\n    color: white;\n  }\n`\nconst Footer = styled.footer`\n  color: gray;\n`\n\nconst About: React.FC = props => (\n  <div {...props}>\n    <Footer>\n      powered by <Link href=\"https://solidproject.org\">Solid</Link> &middot;{' '}\n      <Link href=\"https://github.com/livegraph-org/solid-math\">source</Link>\n    </Footer>\n  </div>\n)\n\nexport default About\n","import React from 'react'\nimport Login from '../features/login/Login'\nimport VisualizationContainer from '../features/math/visualization/VisualizationContainer'\nimport styled from 'styled-components'\nimport About from './About'\n\nconst PositionedLogin = styled(Login)`\n  position: fixed;\n  top: 1rem;\n  right: 1rem;\n  display: block;\n`\n\nconst PositionedAbout = styled(About)`\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n`\n\nconst FullSizeVisualization = styled(VisualizationContainer)`\n  height: 100vh;\n  width: 100vw;\n  display: block;\n`\n\nconst Layout: React.FC = () => {\n  return (\n    <>\n      <PositionedLogin />\n\n      <PositionedAbout />\n\n      <FullSizeVisualization />\n    </>\n  )\n}\n\nexport default Layout\n","import React, { useEffect } from 'react'\nimport Layout from './components/Layout'\nimport { init as initLogin } from './features/login/loginSlice'\nimport { useAppDispatch } from './app/hooks'\n\nconst App: React.FC = () => {\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(initLogin())\n  }, [dispatch])\n\n  return <Layout />\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport loginReducer from '../features/login/loginSlice'\nimport mathReducer, { addGraph } from '../features/math/mathSlice'\nimport watch from 'redux-watch'\nimport { addDocuments } from '../features/math/mathSlice'\n\nexport const store = configureStore({\n  reducer: {\n    login: loginReducer,\n    math: mathReducer,\n  },\n})\n\n// when userId changes, we want to fetch math documents of that new user\nconst watchLogin = watch(store.getState, 'login.webId')\nstore.subscribe(\n  watchLogin((webId: string) => {\n    store.dispatch(addDocuments(webId))\n  }),\n)\n\n// when documents change, we want to fetch the new document\n// TODO also remove the old documents\nconst watchDocuments = watch(store.getState, 'math.entities.document.allIds')\nstore.subscribe(\n  watchDocuments((newDocs: string[], oldDocs: string[]) => {\n    const diff = newDocs.filter((d: string) => !oldDocs.includes(d))\n    diff.forEach(uri => store.dispatch(addGraph(uri)))\n  }),\n)\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport { store } from './app/store'\nimport reportWebVitals from './reportWebVitals'\nimport { Provider } from 'react-redux'\nimport Modal from 'react-modal'\n\nif (typeof document === 'object') {\n  const appElement = document.querySelector('#root') as HTMLElement\n\n  Modal.setAppElement(appElement)\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}